from argparse import ArgumentParser
import importlib
import logging
import re
import os
import os.path
import subprocess
import tempfile

from PIL import Image

from pyocrsrt.utils import format_srt_time


class SubImage:
    def __init__(self, start, end, image):
        self.start = start
        self.end = end
        self.image = image


def get_parser():
    parser = ArgumentParser()
    parser.add_argument("--ak", help="Access key used by ocr backend")
    parser.add_argument("--sk", help="Secret key used by ocr backend")
    parser.add_argument("--ocr", default="BaiduAIOCRClient",
                        help="Backend used for ocr subtitles, for now only "
                             "support BaiduAIOCRClient")

    parser.add_argument("-f", "--finder-path", default="VideoSubFinder",
                        help="Path to your VideoSubFinder")
    parser.add_argument("-c", "--general-settings",
                        help="VideoSubFinder's general setting path")

    parser.add_argument("-I", "--input-image-dir",
                        help="TXTImages folder generated by VideoSubFinder")
    parser.add_argument("-V", "--input-video-file",
                        help="Video file used for ripping subtitles")
    parser.add_argument("output",
                        help="Output srt filename")
    return parser


def read_images(dirname):
    filenames = [os.path.join(dirname, name) for name in os.listdir(dirname)]
    for filename in filenames:
        name = os.path.basename(filename)
        pattern = r"^(\d+)_(\d+)_(\d+)_(\d+)__(\d+)_(\d+)_(\d+)_(\d+)"
        match = re.match(pattern, name)
        if not match:
            continue
        start = list(map(int, match.group(*list(range(1, 5)))))
        end = list(map(int, match.group(*list(range(5, 9)))))
        im = Image.open(filename)
        yield SubImage(start, end, im)


def video_input_handler(args):
    with tempfile.TemporaryDirectory() as dir:
        logging.info(dir + " as the temporary working directory")
        command = [
            args.finder_path,
            "-i", args.input_video_file,
            "-r",
            "-ovffmpeg",
            "-o", dir,
            "-ccti"
        ]
        if args.general_settings:
            command.extend(["-gs", args.general_settings])
        subprocess.call(command)
        args.input_image_dir = os.path.join(dir, "TXTImages")
        image_input_handler(args)


def image_input_handler(args):
    sub_images = list(read_images(args.input_image_dir))
    logging.info("successful load {0} images".format(len(sub_images)))

    ocr_backend = args.ocr
    ocr_cls = getattr(importlib.import_module("pyocrsrt.ocrs"), ocr_backend)
    client = ocr_cls(args.ak, args.sk)
    result = client.ocr(sub_images)
    logging.info("successful recoginzed {0} subtitles".format(len(result)))

    with open(args.output, "w", encoding="utf-8") as f:
        for i, sub in enumerate(result):
            f.write("{0}\n{1} --> {2}\n{3}\n\n".format(
                str(i + 1),
                format_srt_time(sub.start), format_srt_time(sub.end),
                sub.text
            ))


def main():
    args = get_parser().parse_args()

    if not args.input_image_dir and not args.input_video_file:
        exit("You must provide either --input-image-dir or "
             "--input-video-file")

    if args.input_image_dir:
        image_input_handler(args)
    else:
        video_input_handler(args)
